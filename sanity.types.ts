/**
 * ---------------------------------------------------------------------------------
 * This file has been generated by Sanity TypeGen.
 * Command: `sanity typegen generate`
 *
 * Any modifications made directly to this file will be overwritten the next time
 * the TypeScript definitions are generated. Please make changes to the Sanity
 * schema definitions and/or GROQ queries if you need to update these types.
 *
 * For more information on how to use Sanity TypeGen, visit the official documentation:
 * https://www.sanity.io/docs/sanity-typegen
 * ---------------------------------------------------------------------------------
 */

// Source: schema.json
export type ColorSwatches = {
  _id: string;
  _type: "colorSwatches";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  colorName?: string;
  colorHexCode?: Color;
  image?: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: "image";
  };
  fitStyle?: "slimFit" | "oversizedFit" | "boxFit";
};

export type TempleteLogos = {
  _id: string;
  _type: "templeteLogos";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  logoName?: string;
  image?: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: "image";
  };
};

export type Order = {
  _id: string;
  _type: "order";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  orderId?: string;
  clerkUserId?: string;
  customerEmail?: string;
  customerName?: string;
  customerPhone?: string;
  shippingAddress?: {
    street?: string;
    city?: string;
    country?: string;
    postalCode?: string;
  };
  items?: Array<{
    product?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "product";
    };
    quantity?: number;
    price?: number;
    size?: string;
    _key: string;
  }>;
  totalAmount?: number;
  paymentStatus?: "pending" | "completed" | "failed" | "cod_pending";
  paymentMethod?: "paymob" | "cod";
  paymobOrderId?: string;
  paymobTransactionId?: string;
  orderStatus?: "pending" | "confirmed" | "processing" | "shipped" | "delivered" | "cancelled";
  codNotes?: string;
  createdAt?: string;
  updatedAt?: string;
  fileUrl?: string;
};

export type Category = {
  _id: string;
  _type: "category";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  title?: string;
  slug?: Slug;
  description?: string;
  image?: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: "image";
  };
};

export type Product = {
  _id: string;
  _type: "product";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  name?: string;
  slug?: Slug;
  description?: string;
  images?: Array<{
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: "image";
    _key: string;
  }>;
  file?: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.fileAsset";
    };
    media?: unknown;
    _type: "file";
  };
  price?: number;
  sizes?: Array<{
    size?: string;
    stock?: number;
    _key: string;
  }>;
  categories?: Array<{
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    _key: string;
    [internalGroqTypeReferenceTo]?: "category";
  }>;
};

export type Sale = {
  _id: string;
  _type: "sale";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  title?: string;
  description?: string;
  discountedAmount?: number;
  couponCode?: string;
  validFrom?: string;
  validUntil?: string;
  isActive?: boolean;
};

export type Color = {
  _type: "color";
  hex?: string;
  alpha?: number;
  hsl?: HslaColor;
  hsv?: HsvaColor;
  rgb?: RgbaColor;
};

export type RgbaColor = {
  _type: "rgbaColor";
  r?: number;
  g?: number;
  b?: number;
  a?: number;
};

export type HsvaColor = {
  _type: "hsvaColor";
  h?: number;
  s?: number;
  v?: number;
  a?: number;
};

export type HslaColor = {
  _type: "hslaColor";
  h?: number;
  s?: number;
  l?: number;
  a?: number;
};

export type SanityImagePaletteSwatch = {
  _type: "sanity.imagePaletteSwatch";
  background?: string;
  foreground?: string;
  population?: number;
  title?: string;
};

export type SanityImagePalette = {
  _type: "sanity.imagePalette";
  darkMuted?: SanityImagePaletteSwatch;
  lightVibrant?: SanityImagePaletteSwatch;
  darkVibrant?: SanityImagePaletteSwatch;
  vibrant?: SanityImagePaletteSwatch;
  dominant?: SanityImagePaletteSwatch;
  lightMuted?: SanityImagePaletteSwatch;
  muted?: SanityImagePaletteSwatch;
};

export type SanityImageDimensions = {
  _type: "sanity.imageDimensions";
  height?: number;
  width?: number;
  aspectRatio?: number;
};

export type SanityImageHotspot = {
  _type: "sanity.imageHotspot";
  x?: number;
  y?: number;
  height?: number;
  width?: number;
};

export type SanityImageCrop = {
  _type: "sanity.imageCrop";
  top?: number;
  bottom?: number;
  left?: number;
  right?: number;
};

export type SanityFileAsset = {
  _id: string;
  _type: "sanity.fileAsset";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  originalFilename?: string;
  label?: string;
  title?: string;
  description?: string;
  altText?: string;
  sha1hash?: string;
  extension?: string;
  mimeType?: string;
  size?: number;
  assetId?: string;
  uploadId?: string;
  path?: string;
  url?: string;
  source?: SanityAssetSourceData;
};

export type SanityImageAsset = {
  _id: string;
  _type: "sanity.imageAsset";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  originalFilename?: string;
  label?: string;
  title?: string;
  description?: string;
  altText?: string;
  sha1hash?: string;
  extension?: string;
  mimeType?: string;
  size?: number;
  assetId?: string;
  uploadId?: string;
  path?: string;
  url?: string;
  metadata?: SanityImageMetadata;
  source?: SanityAssetSourceData;
};

export type SanityImageMetadata = {
  _type: "sanity.imageMetadata";
  location?: Geopoint;
  dimensions?: SanityImageDimensions;
  palette?: SanityImagePalette;
  lqip?: string;
  blurHash?: string;
  hasAlpha?: boolean;
  isOpaque?: boolean;
};

export type Geopoint = {
  _type: "geopoint";
  lat?: number;
  lng?: number;
  alt?: number;
};

export type Slug = {
  _type: "slug";
  current?: string;
  source?: string;
};

export type SanityAssetSourceData = {
  _type: "sanity.assetSourceData";
  name?: string;
  id?: string;
  url?: string;
};

export type AllSanitySchemaTypes = ColorSwatches | TempleteLogos | Order | Category | Product | Sale | Color | RgbaColor | HsvaColor | HslaColor | SanityImagePaletteSwatch | SanityImagePalette | SanityImageDimensions | SanityImageHotspot | SanityImageCrop | SanityFileAsset | SanityImageAsset | SanityImageMetadata | Geopoint | Slug | SanityAssetSourceData;
export declare const internalGroqTypeReferenceTo: unique symbol;
// Source: ./sanity/lib/customizationTools/getAllColorSwatches.ts
// Variable: COLORSWATCHES_QUERY
// Query: {      "swatches": *[_type == "colorSwatches"] | order(_createdAt desc) [$offset...$limit],      "total": count(*[_type == "colorSwatches"])    }
export type COLORSWATCHES_QUERYResult = {
  swatches: Array<{
    _id: string;
    _type: "colorSwatches";
    _createdAt: string;
    _updatedAt: string;
    _rev: string;
    colorName?: string;
    colorHexCode?: Color;
    image?: {
      asset?: {
        _ref: string;
        _type: "reference";
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
      };
      media?: unknown;
      hotspot?: SanityImageHotspot;
      crop?: SanityImageCrop;
      _type: "image";
    };
    fitStyle?: "boxFit" | "oversizedFit" | "slimFit";
  }>;
  total: number;
};

// Source: ./sanity/lib/customizationTools/getAllLogos.ts
// Variable: LOGOS_QUERY
// Query: {      "logos": *[_type == "templeteLogos"] | order(name asc) [$offset...$limit],      "total": count(*[_type == "templeteLogos"])    }
export type LOGOS_QUERYResult = {
  logos: Array<{
    _id: string;
    _type: "templeteLogos";
    _createdAt: string;
    _updatedAt: string;
    _rev: string;
    logoName?: string;
    image?: {
      asset?: {
        _ref: string;
        _type: "reference";
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
      };
      media?: unknown;
      hotspot?: SanityImageHotspot;
      crop?: SanityImageCrop;
      _type: "image";
    };
  }>;
  total: number;
};

// Source: ./sanity/lib/orders/getMyOrders.ts
// Variable: MY_ORERS_QUERY
// Query: *[_type == "order" && clerkUserId == $userId] | order(createdAt desc) {        _id,        orderId,        customerName,        totalAmount,        paymentStatus,        paymentMethod,        orderStatus,        createdAt,        items[] {          quantity,          price,          product-> {            _id,            name,            images          }        }      }
export type MY_ORERS_QUERYResult = Array<{
  _id: string;
  orderId: string | null;
  customerName: string | null;
  totalAmount: number | null;
  paymentStatus: "cod_pending" | "completed" | "failed" | "pending" | null;
  paymentMethod: "cod" | "paymob" | null;
  orderStatus: "cancelled" | "confirmed" | "delivered" | "pending" | "processing" | "shipped" | null;
  createdAt: string | null;
  items: Array<{
    quantity: number | null;
    price: number | null;
    product: {
      _id: string;
      name: string | null;
      images: Array<{
        asset?: {
          _ref: string;
          _type: "reference";
          _weak?: boolean;
          [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
        };
        media?: unknown;
        hotspot?: SanityImageHotspot;
        crop?: SanityImageCrop;
        _type: "image";
        _key: string;
      }> | null;
    } | null;
  }> | null;
}>;

// Source: ./sanity/lib/orders/getOrderByOrderId.ts
// Variable: GET_ORDER_BY_ORDER_ID_QUERY
// Query: *[_type == "order" && orderId == $orderId][0]
export type GET_ORDER_BY_ORDER_ID_QUERYResult = {
  _id: string;
  _type: "order";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  orderId?: string;
  clerkUserId?: string;
  customerEmail?: string;
  customerName?: string;
  customerPhone?: string;
  shippingAddress?: {
    street?: string;
    city?: string;
    country?: string;
    postalCode?: string;
  };
  items?: Array<{
    product?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "product";
    };
    quantity?: number;
    price?: number;
    size?: string;
    _key: string;
  }>;
  totalAmount?: number;
  paymentStatus?: "cod_pending" | "completed" | "failed" | "pending";
  paymentMethod?: "cod" | "paymob";
  paymobOrderId?: string;
  paymobTransactionId?: string;
  orderStatus?: "cancelled" | "confirmed" | "delivered" | "pending" | "processing" | "shipped";
  codNotes?: string;
  createdAt?: string;
  updatedAt?: string;
  fileUrl?: string;
} | null;

// Source: ./sanity/lib/products/getAllCategories.ts
// Variable: ALL_CATEGORIES_QUERY
// Query: *[_type == "category"] | order(name asc)
export type ALL_CATEGORIES_QUERYResult = Array<{
  _id: string;
  _type: "category";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  title?: string;
  slug?: Slug;
  description?: string;
  image?: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: "image";
  };
}>;

// Source: ./sanity/lib/products/getAllProducts.ts
// Variable: All_PRODUCTS_QUERY
// Query: *[_type == "product" && name != "custom t-shirt"] | order(name asc) {            _id,            name,            slug,            images,            price,            sizes,            categories        }
export type All_PRODUCTS_QUERYResult = Array<{
  _type:"product",
  _craetedAt: string,
  _updatedAt: string,
  _rev: string,
  _id: string;
  name: string | null;
  slug: Slug | null;
  images: Array<{
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: "image";
    _key: string;
  }> | null;
  price: number | null;
  sizes: Array<{
    size?: string;
    stock?: number;
    _key: string;
  }> | null;
  categories: Array<{
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    _key: string;
    [internalGroqTypeReferenceTo]?: "category";
  }> | null;
}>;

// Source: ./sanity/lib/products/getProductsByCategory.ts
// Variable: PRODUCTS_BY_CATEGORY_QUERY
// Query: *[_type == "product" && references(*[_type == "category" && slug.current == $categorySlug]._id)] | order(name asc) {        _id,        name,        slug,        images,        price,        sizes,        categories    }
export type PRODUCTS_BY_CATEGORY_QUERYResult = Array<{

  _type:"product",
  _createdAt: string,
  _updatedAt: string,
  _rev: string,
  _id: string;
  name: string | null;
  slug: Slug | null;
  images: Array<{
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: "image";
    _key: string;
  }> | null;
  price: number | null;
  sizes: Array<{
    size?: string;
    stock?: number;
    _key: string;
  }> | null;
  categories: Array<{
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    _key: string;
    [internalGroqTypeReferenceTo]?: "category";
  }> | null;
}>;

// Source: ./sanity/lib/sales/getActiveSaleByCouponCode.ts
// Variable: ACTIVE_SALE_BY_COUPON_QUERY
// Query: *[_type == "sale" && couponCode == $couponCode && isActive == true] | order(validFrom desc)[0]
export type ACTIVE_SALE_BY_COUPON_QUERYResult = {
  _id: string;
  _type: "sale";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  title?: string;
  description?: string;
  discountedAmount?: number;
  couponCode?: string;
  validFrom?: string;
  validUntil?: string;
  isActive?: boolean;
} | null;

// Query TypeMap
import "@sanity/client";
declare module "@sanity/client" {
  interface SanityQueries {
    "\n    {\n      \"swatches\": *[_type == \"colorSwatches\"] | order(_createdAt desc) [$offset...$limit],\n      \"total\": count(*[_type == \"colorSwatches\"])\n    }\n  ": COLORSWATCHES_QUERYResult;
    "\n    {\n      \"logos\": *[_type == \"templeteLogos\"] | order(name asc) [$offset...$limit],\n      \"total\": count(*[_type == \"templeteLogos\"])\n    }\n  ": LOGOS_QUERYResult;
    "*[_type == \"order\" && clerkUserId == $userId] | order(createdAt desc) {\n        _id,\n        orderId,\n        customerName,\n        totalAmount,\n        paymentStatus,\n        paymentMethod,\n        orderStatus,\n        createdAt,\n        items[] {\n          quantity,\n          price,\n          product-> {\n            _id,\n            name,\n            images\n          }\n        }\n      }": MY_ORERS_QUERYResult;
    "\n    *[_type == \"order\" && orderId == $orderId][0]\n  ": GET_ORDER_BY_ORDER_ID_QUERYResult;
    "\n        *[_type == \"category\"] | order(name asc) \n        ": ALL_CATEGORIES_QUERYResult;
    "\n        *[_type == \"product\" && name != \"custom t-shirt\"] | order(name asc) {\n            _id,\n            name,\n            slug,\n            images,\n            price,\n            sizes,\n            categories\n        }\n        ": All_PRODUCTS_QUERYResult;
    "\n    *[_type == \"product\" && references(*[_type == \"category\" && slug.current == $categorySlug]._id)] | order(name asc) {\n    }\n    ": PRODUCTS_BY_CATEGORY_QUERYResult;
    "\n        *[_type == \"sale\" && couponCode == $couponCode && isActive == true] | order(validFrom desc)[0]\n        ": ACTIVE_SALE_BY_COUPON_QUERYResult;
  }
}
